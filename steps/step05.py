#No code
"""역전파 이론 정리

수치미분 대신 역전파를 사용하여 미분을 효율적으로 계산할 수 있다. (오차도 더 적다.)
역전파는 연쇄 법칙(chain rule)에 기반한다.
연쇄 법칙에 따르면 합성 함수의 미분은 구성 함수 각각을 미분한 후 곱한 것과 같다.
예를 들어, a= A(x) -> b = B(a) -> y = C(b)로 구성된 합성함수 y = F(x)를 생각해보자.

x -> [A] -> a -> [B] -> b -> [C] -> y

이때 x에 대한 y의 미분은 다음과 같이 표현할 수 있다.

dy/dx = dy/db * db/da * db/dx

역전파 구현할 때를 대비하여 dy/dy (=1)를 앞에 명시할 수도 있다.
dy/dx = dy/dy * dy/db * db/da * db/dx

곱하는 순서는 상관없지만 출력에서 입력 방향으로, 즉 역방향으로 순서대로 계산해보자.
dy/dx = ((dy/dy * dy/db)* db/da)* db/dx

계산 그래프로 표현해보면,
dy/dx <-[A'(x)] <- dy/da <- [B'(a)] <- dy/db <-[C'(b)] <- dy/dy
(일반적인 계산 그래프처럼 함수에 값이 입력으로 들어가는 것이 아니라, 값과 도함수의 곱을 노드 하나로 간략히 표현한 것이다.)

자 이제 통상적인 계산인 순전파 그래프와 미분을 계산하는 역전파 계산 그래프를 위아래로 나란히 놓고 살펴보자.
x       ->  [A]     ->  a       ->  [B]     ->  b       ->  [C]     -> y       //순전파
dy/dx   <-  [A'(x)] <-  dy/da   <-  [B'(a)] <-  dy/db   <-  [C'(b)] <- dy/dy   //역전파

그럼 다음과 같은 교훈을 얻을 수 있다.
1. 오른쪽에서 왼쪽으로 y의 각 변수(y,b,a,x)에 대한 미분값이 전파되고 있다.
2. C'(b), B'(a)를 구하려면 b,a를 알아야한다. 즉 역전파 시에는 순전파를 먼저하고, 그 과정에서 나온 중간 데이터들을 기억해두고 사용해야한다.
"""

"""추가
입력에서 출력 방향으로 계산하는 방법도 생각할 수 있다. 이를 '포워드 모드 자동 미분'이라고 한다.
이때는 y의 미분값이 전파되는 것이 아니라, x에 대한 미분을 전파하게 된다.

dx/dx -> [A'(x)] -> da/dx -> [B'(a)] -> db/dx -> [C'(b)] -> dy/dx

기존 역전파 방식과 비교했을 때 곱해야하는 도함수 - A'(x), B'(a), C'(b) -는 동일하고, 방향과 전파되는 값만 다르다는걸 알 수 있다.
"""